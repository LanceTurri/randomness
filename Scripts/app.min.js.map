{"version":3,"sources":["app.js"],"names":["RandomGenerator","sizeRandomization","splitArray","arrayCount","Math","ceil","length","self","groupSize","tempArray","Array","i","index","inrayception","j","currentArrayEntry","peopleArray","groupRandomization","groupNumber","index2","this","mode","ko","observable","peopleNames","observableArray","isRandomizationEnabled","pureComputed","groupSizeDisplay","groupNumberDisplay","randomizePeople","replace","split","currentIndex","randomIndex","temporaryIndex","floor","random","$","applyBindings"],"mappings":"AAAA,GAAIA,iBAAkB,WAmElB,QAASC,GAAkBC,GAOvB,IAAK,GALDC,GAAaC,KAAKC,KAAKH,EAAWI,OAASC,EAAKC,aAGhDC,EAAY,GAAIC,OAAMP,GAEjBQ,EAAI,EAAGA,EAAIR,EAAYQ,IAC5BF,EAAUE,KAOd,KAHA,GAAIC,GAAQ,EACRC,EAAe,EAEZD,EAAQT,GAAY,CACvB,IAAK,GAAIW,GAAI,EAAGA,EAAIP,EAAKC,YAAaM,IAAK,CACvC,GAAIC,GAAoBb,EAAWW,EAEnC,KAAIE,EAIA,KAHAN,GAAUG,GAAOE,GAAKZ,EAAWW,GACjCA,IAKRD,IAGJL,EAAKS,YAAYP,GAGrB,QAASQ,GAAmBf,GAQxB,IAAK,GANDC,GAAaI,EAAKW,cAIlBT,GAHgBL,KAAKC,KAAKH,EAAWI,OAASC,EAAKW,eAGvC,GAAIR,OAAMP,IAEjBQ,EAAI,EAAGA,EAAIR,EAAYQ,IAC5BF,EAAUE,KASd,KAAK,GALDC,GAAQ,EACRO,EAAS,EAIJR,EAAI,EAAGA,EAAIT,EAAWI,OAAQK,IAAK,CACxC,GAAII,GAAoBb,EAAWiB,EAEnC,KAAGJ,EAIC,KAHAN,GAAUE,EAAI,GAAcC,GAASV,EAAWiB,GAChDA,IAKDR,EAAI,IAAiB,GACpBC,IAKRL,EAAKS,YAAYP,GApIrB,GAAIF,GAAOa,IAEXb,GAAKc,KAAOC,GAAGC,WAAW,QAC1BhB,EAAKC,UAAYc,GAAGC,aACpBhB,EAAKW,YAAcI,GAAGC,aACtBhB,EAAKiB,YAAcF,GAAGC,WAAW,IACjChB,EAAKS,YAAcM,GAAGG,oBAEtBlB,EAAKmB,uBAAyBJ,GAAGK,aAAa,WAC1C,MAAqB,SAAhBpB,EAAKc,QAAqBd,EAAKC,YAAc,GAAuB,UAAhBD,EAAKc,QAAsBd,EAAKW,cAAgB,IAO7GX,EAAKqB,iBAAmBN,GAAGK,aAAa,WACpC,MAAIpB,GAAKC,YACED,EAAKC,YAGT,QAGXD,EAAKsB,mBAAqBP,GAAGK,aAAa,WACtC,MAAIpB,GAAKW,cACEX,EAAKW,cAGT,QAGXX,EAAKuB,gBAAkB,WAUnB,IARA,GAAI5B,GAAaK,EAAKiB,cAAcO,QAAQ,WAAY,IAAIA,QAAQ,cAAa,IAAIC,MAAM,KAGvFC,EAAe/B,EAAWI,OAAS,EACnC4B,EAAc,KACdC,EAAiB,KAGG,IAAjBF,GAEHC,EAAc9B,KAAKgC,MAAMhC,KAAKiC,SAAWJ,GAGzCE,EAAiBjC,EAAW+B,GAG5B/B,EAAW+B,GAAgB/B,EAAWgC,GAGtChC,EAAWgC,GAAeC,EAG1BF,GAAgB,CAGD,UAAhB1B,EAAKc,OACJpB,EAAkBC,GACI,UAAhBK,EAAKc,QACXJ,EAAmBf,IA0E/BoC,GAAE,WACEhB,GAAGiB,cAAcvC","file":"app.min.js","sourcesContent":["var RandomGenerator = function() {\n    var self = this;\n\n    self.mode = ko.observable('size');\n    self.groupSize = ko.observable();\n    self.groupNumber = ko.observable();\n    self.peopleNames = ko.observable('');\n    self.peopleArray = ko.observableArray([]);\n\n    self.isRandomizationEnabled = ko.pureComputed(function () {\n        if ((self.mode() === 'size' && self.groupSize() > 0) || (self.mode() === 'group' && self.groupNumber() > 0)) {\n            return true;\n        }\n\n        return false;\n    });\n\n    self.groupSizeDisplay = ko.pureComputed(function () {\n        if (self.groupSize()) {\n            return self.groupSize();\n        }\n\n        return 'N/A';\n    });\n\n    self.groupNumberDisplay = ko.pureComputed(function () {\n        if (self.groupNumber()) {\n            return self.groupNumber();\n        }\n\n        return 'N/A';\n    });\n\n    self.randomizePeople = function() {\n        // First we split the string from the textArea into an array\n        var splitArray = self.peopleNames().replace(/\\r?\\n|\\r/, '').replace(/[^/w/s]gi/, '').split(',');\n\n        // Now we randomize the array to assist with the grouping later\n        var currentIndex = splitArray.length - 1;\n        var randomIndex = null;\n        var temporaryIndex = null;\n\n        // Let's randomize this array!\n        while (currentIndex !== 0) {\n            // Get a random number\n            randomIndex = Math.floor(Math.random() * currentIndex);\n\n            // Store temporary value from the current index\n            temporaryIndex = splitArray[currentIndex];\n\n            // Set the current index with the random index number\n            splitArray[currentIndex] = splitArray[randomIndex];\n\n            // Set the temporary index to the random index that was just used\n            splitArray[randomIndex] = temporaryIndex;\n\n            // Decrement index\n            currentIndex -= 1;\n        }\n\n        if(self.mode() === 'size') {\n            sizeRandomization(splitArray);\n        } else if(self.mode() === 'group') {\n            groupRandomization(splitArray);\n        }\n    }\n\n    function sizeRandomization(splitArray) {\n        // 12 people 3 group size = 4 arrays\n        var arrayCount = Math.ceil(splitArray.length / self.groupSize());\n\n        // First let's build our array of arrays\n        var tempArray = new Array(arrayCount);\n\n        for (var i = 0; i < arrayCount; i++) {\n            tempArray[i] = []; // Empty Array\n        }\n\n        // Now let's populate all of those arrays!\n        var index = 0;\n        var inrayception = 0;\n\n        while (index < arrayCount) {\n            for (var j = 0; j < self.groupSize(); j++) {\n                var currentArrayEntry = splitArray[inrayception]\n\n                if( currentArrayEntry) {\n                    tempArray[index][j] = splitArray[inrayception];\n                    inrayception++;\n                } else {\n                    break;\n                }\n            };\n            index++;\n        };\n\n        self.peopleArray(tempArray);\n    }\n\n    function groupRandomization(splitArray) {\n        // 12 people 3 group size = 4 arrays\n        var arrayCount = self.groupNumber();\n        var arraryNumbers = Math.ceil(splitArray.length / self.groupNumber());\n\n        // First let's build our array of arrays\n        var tempArray = new Array(arrayCount);\n\n        for (var i = 0; i < arrayCount; i++) {\n            tempArray[i] = []; // Empty Array\n        }\n\n        // Now let's populate all of those arrays!\n        var index = 0;\n        var index2 = 0;\n\n\n        // 12 people with 3 groups needed.\n        for (var i = 0; i < splitArray.length; i++) {\n            var currentArrayEntry = splitArray[index2]\n\n            if(currentArrayEntry) {\n                tempArray[i % (arrayCount)][index] = splitArray[index2];\n                index2++;\n            } else {\n                break;\n            }\n\n            if(i % (arrayCount) === 0) {\n                index++;\n            }\n\n        };\n\n        self.peopleArray(tempArray);\n    }\n}\n\n$(function() {\n    ko.applyBindings(RandomGenerator());\n});\n\n\n"]}