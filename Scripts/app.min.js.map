{"version":3,"sources":["app.js"],"names":["randomGeneratorViewModel","_this","this","mode","ko","observable","groupSize","groupNumber","peopleNames","peopleArray","observableArray","randomGroupNames","isRandomizationEnabled","pureComputed","parseInt","groupSizeDisplay","groupNumberDisplay","groupNameDisplay","randomTeamName","Math","floor","random","length","prototype","randomizePeople","splitArray","replace","split","currentIndex","randomIndex","temporaryArrayString","sizeRandomization","groupRandomization","arrayCount","ceil","tempArray","Array","i","index","inrayception","j","currentArrayEntry","current","console","log","$","applyBindings"],"mappings":"AAAA,GAAIA,0BAA4B,WAC5B,QAASA,KACL,GAAIC,GAAQC,IACZA,MAAKC,KAAOC,GAAGC,WAAW,QAC1BH,KAAKI,UAAYF,GAAGC,WAAW,IAC/BH,KAAKK,YAAcH,GAAGC,WAAW,IACjCH,KAAKM,YAAcJ,GAAGC,WAAW,IACjCH,KAAKO,YAAcL,GAAGM,oBACtBR,KAAKS,kBACD,cACA,iBACA,mBACA,cACA,cACA,UACA,WACA,SACA,aACA,aAEJT,KAAKU,uBAAyBR,GAAGS,aAAa,WAC1C,MAAsB,SAAjBZ,EAAME,QAAqBW,SAASb,EAAMK,aAAe,GAAwB,UAAjBL,EAAME,QAAsBW,SAASb,EAAMM,eAAiB,IAKrIL,KAAKa,iBAAmBX,GAAGS,aAAa,WACpC,MAAIZ,GAAMK,YACCL,EAAMK,YAEV,QAEXJ,KAAKc,mBAAqBZ,GAAGS,aAAa,WACtC,MAAIZ,GAAMM,cACCN,EAAMM,cAEV,QAEXL,KAAKe,iBAAmBb,GAAGS,aAAa,WAEpC,GAAIK,GAAiBjB,EAAMU,iBAAiBQ,KAAKC,MAAMD,KAAKE,UAAYpB,EAAMQ,YAAYa,OAAS,IACnG,OAAO,SAAWJ,IAwF1B,MArFAlB,GAAyBuB,UAAUC,gBAAkB,WAQjD,IANA,GAAIC,GAAavB,KAAKM,cAAckB,QAAQ,WAAY,IAAIA,QAAQ,cAAa,IAAIA,QAAQ,KAAM,KAAKC,MAAM,KAE1GC,EAAeH,EAAWH,OAAS,EACnCO,EAAc,KACdC,EAAuB,KAEH,IAAjBF,GAEHC,EAAcV,KAAKC,MAAMD,KAAKE,SAAWO,GAEzCE,EAAuBL,EAAWG,GAElCH,EAAWG,GAAgBH,EAAWI,GAEtCJ,EAAWI,GAAeC,EAE1BF,GAAgB,CAEA,UAAhB1B,KAAKC,OACLD,KAAK6B,kBAAkBN,GAEF,UAAhBvB,KAAKC,QACVD,KAAK8B,mBAAmBP,IAGhCzB,EAAyBuB,UAAUQ,kBAAoB,SAAUN,GAK7D,IAAK,GAHDQ,GAAad,KAAKe,KAAKT,EAAWH,OAASR,SAASZ,KAAKI,cAEzD6B,EAAY,GAAIC,OAAMH,GACjBI,EAAI,EAAGA,EAAIJ,EAAYI,IAC5BF,EAAUE,KAKd,KAFA,GAAIC,GAAQ,EACRC,EAAe,EACZD,EAAQL,GAAY,CACvB,IAAK,GAAIO,GAAI,EAAGA,EAAI1B,SAASZ,KAAKI,aAAckC,IAAK,CACjD,GAAIC,GAAoBhB,EAAWc,EACnC,KAAIE,EAKA,KAJAN,GAAUG,GAAOE,GAAKf,EAAWc,GACjCA,IAORD,IAGJpC,KAAKO,YAAY0B,IAErBnC,EAAyBuB,UAAUS,mBAAqB,SAAUP,GAM9D,IAAK,GAJDQ,GAAanB,SAASZ,KAAKK,eAG3B4B,GAFgBhB,KAAKe,KAAKT,EAAWH,OAASR,SAASZ,KAAKK,oBAGvD8B,EAAI,EAAGA,EAAIJ,EAAYI,IAC5BF,EAAUE,KAMd,KAAK,GAHDC,GAAQ,EACRI,EAAU,EAELL,EAAI,EAAGA,EAAIZ,EAAWH,OAAQe,IAAK,CACxC,GAAII,GAAoBhB,EAAWiB,EACnC,KAAID,EAKA,KAJAN,GAAUE,EAAI,GAAcC,GAASb,EAAWiB,GAChDA,IAKAL,EAAI,IAAiB,GACrBC,IAIRK,QAAQC,IAAIT,GACZjC,KAAKO,YAAY0B,IAEdnC,IAEX6C,GAAE,WACEzC,GAAG0C,cAAc,GAAI9C","file":"app.min.js","sourcesContent":["var randomGeneratorViewModel = (function () {\n    function randomGeneratorViewModel() {\n        var _this = this;\n        this.mode = ko.observable('size');\n        this.groupSize = ko.observable('');\n        this.groupNumber = ko.observable('');\n        this.peopleNames = ko.observable('');\n        this.peopleArray = ko.observableArray([]);\n        this.randomGroupNames = [\n            'Amazingness',\n            'Dream Crushers',\n            'Rainbow Warriors',\n            'Kitten Cats',\n            'Blue Fishes',\n            'Raptors',\n            'Monsters',\n            'Agents',\n            'Adventures',\n            'Wolf Pack',\n        ];\n        this.isRandomizationEnabled = ko.pureComputed(function () {\n            if ((_this.mode() === 'size' && parseInt(_this.groupSize()) > 0) || (_this.mode() === 'group' && parseInt(_this.groupNumber()) > 0)) {\n                return true;\n            }\n            return false;\n        });\n        this.groupSizeDisplay = ko.pureComputed(function () {\n            if (_this.groupSize()) {\n                return _this.groupSize();\n            }\n            return 'N/A';\n        });\n        this.groupNumberDisplay = ko.pureComputed(function () {\n            if (_this.groupNumber()) {\n                return _this.groupNumber();\n            }\n            return 'N/A';\n        });\n        this.groupNameDisplay = ko.pureComputed(function () {\n            // Once the team lead checkbox is implmented, make sure to check the state here.\n            var randomTeamName = _this.randomGroupNames[Math.floor(Math.random() * (_this.peopleArray.length - 0))];\n            return \"Group \" + randomTeamName;\n        });\n    }\n    randomGeneratorViewModel.prototype.randomizePeople = function () {\n        // First we split the string from the textArea into an array\n        var splitArray = this.peopleNames().replace(/\\r?\\n|\\r/, '').replace(/[^/w/s]gi/, '').replace(',,', ',').split(',');\n        // Now we randomize the array to assist with the grouping later\n        var currentIndex = splitArray.length - 1;\n        var randomIndex = null;\n        var temporaryArrayString = null;\n        // Let's randomize this array!\n        while (currentIndex !== 0) {\n            // Get a random number\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            // Store temporary value from the current index\n            temporaryArrayString = splitArray[currentIndex];\n            // Set the current index with the random index number\n            splitArray[currentIndex] = splitArray[randomIndex];\n            // Set the temporary index to the random index that was just used\n            splitArray[randomIndex] = temporaryArrayString;\n            // Decrement index\n            currentIndex -= 1;\n        }\n        if (this.mode() === 'size') {\n            this.sizeRandomization(splitArray);\n        }\n        else if (this.mode() === 'group') {\n            this.groupRandomization(splitArray);\n        }\n    };\n    randomGeneratorViewModel.prototype.sizeRandomization = function (splitArray) {\n        // 12 people 3 group size = 4 arrays\n        var arrayCount = Math.ceil(splitArray.length / parseInt(this.groupSize()));\n        // First let's build our array of arrays\n        var tempArray = new Array(arrayCount);\n        for (var i = 0; i < arrayCount; i++) {\n            tempArray[i] = []; // Empty Array\n        }\n        // Now let's populate all of those arrays!\n        var index = 0;\n        var inrayception = 0;\n        while (index < arrayCount) {\n            for (var j = 0; j < parseInt(this.groupSize()); j++) {\n                var currentArrayEntry = splitArray[inrayception];\n                if (currentArrayEntry) {\n                    tempArray[index][j] = splitArray[inrayception];\n                    inrayception++;\n                }\n                else {\n                    break;\n                }\n            }\n            ;\n            index++;\n        }\n        ;\n        this.peopleArray(tempArray);\n    };\n    randomGeneratorViewModel.prototype.groupRandomization = function (splitArray) {\n        // 12 people 3 group size = 4 arrays\n        var arrayCount = parseInt(this.groupNumber());\n        var arraryNumbers = Math.ceil(splitArray.length / parseInt(this.groupNumber()));\n        // First let's build our array of arrays\n        var tempArray = [];\n        for (var i = 0; i < arrayCount; i++) {\n            tempArray[i] = []; // Empty Array\n        }\n        // Now let's populate all of those arrays!\n        var index = 0;\n        var current = 0;\n        // 12 people with 3 groups needed.\n        for (var i = 0; i < splitArray.length; i++) {\n            var currentArrayEntry = splitArray[current];\n            if (currentArrayEntry) {\n                tempArray[i % (arrayCount)][index] = splitArray[current];\n                current++;\n            }\n            else {\n                break;\n            }\n            if (i % (arrayCount) === 0) {\n                index++;\n            }\n        }\n        ;\n        console.log(tempArray);\n        this.peopleArray(tempArray);\n    };\n    return randomGeneratorViewModel;\n}());\n$(function () {\n    ko.applyBindings(new randomGeneratorViewModel());\n});\n"]}